/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.26).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.EnrollmentRequest;
import io.swagger.model.Identity;
import io.swagger.model.KeySet;
import io.swagger.model.RootIdentityRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-03-23T17:05:44.642Z")

@Validated
@Api(value = "admin", description = "the admin API")
@RequestMapping(value = "")
public interface AdminApi {

    @ApiOperation(value = "Registra uma nova identidade raiz na blockchain e armazena localmente a chave privada", nickname = "adminRootEcIdentityPost", notes = "", response = Identity.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retorna a identidade raiz cadastrada na blockchain", response = Identity.class),
        @ApiResponse(code = 400, message = "Identidade Raiz não criada") })
    @RequestMapping(value = "/admin/root-ec-identity",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Identity> adminRootEcIdentityPost(@ApiParam(value = "variáveis para obter criar uma nova identidade raiz" ,required=true )  @Valid @RequestBody RootIdentityRequest body);


    @ApiOperation(value = "Configura o certificado digital para acesso a Blockchain", nickname = "configureCertificate", notes = "Esta rota deve ser chamada para configurar os certificados digitais necessário para acessar a blockchain", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Certificados digitais configurados"),
        @ApiResponse(code = 400, message = "Erro ao configurar certificados") })
    @RequestMapping(value = "/admin/enroll",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> configureCertificate(@ApiParam(value = "variáveis para obter o certificado digital com a autoridade certificadora" ,required=true )  @Valid @RequestBody EnrollmentRequest body);


    @ApiOperation(value = "Obtem a lista de chaves das identidades raizes mantidas localmente pelo Entity Manager", nickname = "getLocalIdentities", notes = "Esta rota obtem a componente pública dos pares de chaves criptográficas mantidas localmente pelo Entity Manager", response = KeySet.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Uma lista contendo as identidades raízes mantidas pelo Entity Manager", response = KeySet.class),
        @ApiResponse(code = 400, message = "Erro durante leitura das identidades") })
    @RequestMapping(value = "/admin/local-identities",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<KeySet> getLocalIdentities();

}
